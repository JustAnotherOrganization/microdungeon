// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skill.proto

package microdungeon

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Skill is a usable D&D skill.
type Skill struct {
	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DifficultyClass uint32 `protobuf:"varint,3,opt,name=DifficultyClass,proto3" json:"DifficultyClass,omitempty"`
	// armour_check_penalty = 4; // Determine type...
	Modifiers []*Modifier `protobuf:"bytes,5,rep,name=modifiers" json:"modifiers,omitempty"`
	Trained   bool        `protobuf:"varint,6,opt,name=trained,proto3" json:"trained,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{0} }

func (m *Skill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Skill) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Skill) GetDifficultyClass() uint32 {
	if m != nil {
		return m.DifficultyClass
	}
	return 0
}

func (m *Skill) GetModifiers() []*Modifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *Skill) GetTrained() bool {
	if m != nil {
		return m.Trained
	}
	return false
}

func init() {
	proto.RegisterType((*Skill)(nil), "microdungeon.Skill")
}

func init() { proto.RegisterFile("skill.proto", fileDescriptorSkill) }

var fileDescriptorSkill = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0xce, 0xcc,
	0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9, 0xcd, 0x4c, 0x2e, 0xca, 0x4f, 0x29,
	0xcd, 0x4b, 0x4f, 0xcd, 0xcf, 0x93, 0x12, 0x49, 0x4c, 0xca, 0xcc, 0xc9, 0x2c, 0xa9, 0x8c, 0x2f,
	0x4e, 0xce, 0x2f, 0x4a, 0x2d, 0x86, 0xa8, 0x51, 0xda, 0xce, 0xc8, 0xc5, 0x1a, 0x0c, 0xd2, 0x23,
	0x24, 0xc4, 0xc5, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66,
	0x0b, 0x29, 0x70, 0x71, 0xa7, 0xa4, 0x16, 0x27, 0x17, 0x65, 0x16, 0x94, 0x64, 0xe6, 0xe7, 0x49,
	0x30, 0x81, 0xa5, 0x90, 0x85, 0x84, 0x34, 0xb8, 0xf8, 0x5d, 0x32, 0xd3, 0xd2, 0x32, 0x93, 0x4b,
	0x73, 0x4a, 0x2a, 0x9d, 0x73, 0x12, 0x8b, 0x8b, 0x25, 0x98, 0x15, 0x18, 0x35, 0x78, 0x83, 0xd0,
	0x85, 0x85, 0x4c, 0xb8, 0x38, 0x73, 0xf3, 0x53, 0x32, 0xd3, 0x32, 0x53, 0x8b, 0x8a, 0x25, 0x58,
	0x15, 0x98, 0x35, 0xb8, 0x8d, 0xc4, 0xf4, 0x90, 0x5d, 0xa8, 0xe7, 0x0b, 0x95, 0x0e, 0x42, 0x28,
	0x14, 0x92, 0xe0, 0x62, 0x2f, 0x29, 0x4a, 0xcc, 0xcc, 0x4b, 0x4d, 0x91, 0x60, 0x53, 0x60, 0xd4,
	0xe0, 0x08, 0x82, 0x71, 0x9d, 0xf8, 0xa2, 0x50, 0xfc, 0x97, 0xc4, 0x06, 0xf6, 0x90, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0xe9, 0xaa, 0x18, 0x03, 0x01, 0x00, 0x00,
}
