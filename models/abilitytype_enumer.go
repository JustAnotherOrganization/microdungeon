// Code generated by "enumer -type=AbilityType"; DO NOT EDIT.

package models

import (
	"fmt"
	"strings"
)

const _AbilityTypeName = "AbilityTypeUnknownAbilityTypeStrengthAbilityTypeDexterityAbilityTypeConstitutionAbilityTypeIntelligenceAbilityTypeWisdomAbilityTypeCharisma"

var _AbilityTypeIndex = [...]uint8{0, 18, 37, 57, 80, 103, 120, 139}

const _AbilityTypeLowerName = "abilitytypeunknownabilitytypestrengthabilitytypedexterityabilitytypeconstitutionabilitytypeintelligenceabilitytypewisdomabilitytypecharisma"

func (i AbilityType) String() string {
	if i < 0 || i >= AbilityType(len(_AbilityTypeIndex)-1) {
		return fmt.Sprintf("AbilityType(%d)", i)
	}
	return _AbilityTypeName[_AbilityTypeIndex[i]:_AbilityTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AbilityTypeNoOp() {
	var x [1]struct{}
	_ = x[AbilityTypeUnknown-(0)]
	_ = x[AbilityTypeStrength-(1)]
	_ = x[AbilityTypeDexterity-(2)]
	_ = x[AbilityTypeConstitution-(3)]
	_ = x[AbilityTypeIntelligence-(4)]
	_ = x[AbilityTypeWisdom-(5)]
	_ = x[AbilityTypeCharisma-(6)]
}

var _AbilityTypeValues = []AbilityType{AbilityTypeUnknown, AbilityTypeStrength, AbilityTypeDexterity, AbilityTypeConstitution, AbilityTypeIntelligence, AbilityTypeWisdom, AbilityTypeCharisma}

var _AbilityTypeNameToValueMap = map[string]AbilityType{
	_AbilityTypeName[0:18]:         AbilityTypeUnknown,
	_AbilityTypeLowerName[0:18]:    AbilityTypeUnknown,
	_AbilityTypeName[18:37]:        AbilityTypeStrength,
	_AbilityTypeLowerName[18:37]:   AbilityTypeStrength,
	_AbilityTypeName[37:57]:        AbilityTypeDexterity,
	_AbilityTypeLowerName[37:57]:   AbilityTypeDexterity,
	_AbilityTypeName[57:80]:        AbilityTypeConstitution,
	_AbilityTypeLowerName[57:80]:   AbilityTypeConstitution,
	_AbilityTypeName[80:103]:       AbilityTypeIntelligence,
	_AbilityTypeLowerName[80:103]:  AbilityTypeIntelligence,
	_AbilityTypeName[103:120]:      AbilityTypeWisdom,
	_AbilityTypeLowerName[103:120]: AbilityTypeWisdom,
	_AbilityTypeName[120:139]:      AbilityTypeCharisma,
	_AbilityTypeLowerName[120:139]: AbilityTypeCharisma,
}

var _AbilityTypeNames = []string{
	_AbilityTypeName[0:18],
	_AbilityTypeName[18:37],
	_AbilityTypeName[37:57],
	_AbilityTypeName[57:80],
	_AbilityTypeName[80:103],
	_AbilityTypeName[103:120],
	_AbilityTypeName[120:139],
}

// AbilityTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AbilityTypeString(s string) (AbilityType, error) {
	if val, ok := _AbilityTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AbilityTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AbilityType values", s)
}

// AbilityTypeValues returns all values of the enum
func AbilityTypeValues() []AbilityType {
	return _AbilityTypeValues
}

// AbilityTypeStrings returns a slice of all String values of the enum
func AbilityTypeStrings() []string {
	strs := make([]string, len(_AbilityTypeNames))
	copy(strs, _AbilityTypeNames)
	return strs
}

// IsAAbilityType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AbilityType) IsAAbilityType() bool {
	for _, v := range _AbilityTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
