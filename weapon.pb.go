// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: weapon.proto

package microdungeon

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Ammunition_Type int32

const (
	Ammunition_UNKNOWN_TYPE Ammunition_Type = 0
	Ammunition_ARROW        Ammunition_Type = 1
	Ammunition_BOLT         Ammunition_Type = 2
	Ammunition_PEBBLE       Ammunition_Type = 3
)

var Ammunition_Type_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "ARROW",
	2: "BOLT",
	3: "PEBBLE",
}
var Ammunition_Type_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"ARROW":        1,
	"BOLT":         2,
	"PEBBLE":       3,
}

func (x Ammunition_Type) String() string {
	return proto.EnumName(Ammunition_Type_name, int32(x))
}
func (Ammunition_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorWeapon, []int{0, 0} }

type Weapon_Type int32

const (
	Weapon_UNKNOWN_TYPE        Weapon_Type = 0
	Weapon_DAGGER              Weapon_Type = 1
	Weapon_SHORT_BLADE         Weapon_Type = 2
	Weapon_LONG_BLADE          Weapon_Type = 3
	Weapon_HAMMER              Weapon_Type = 4
	Weapon_AXE                 Weapon_Type = 5
	Weapon_POLE_ARM            Weapon_Type = 6
	Weapon_BOW                 Weapon_Type = 50
	Weapon_CROSSBOW            Weapon_Type = 51
	Weapon_BLACK_POWDER_PISTOL Weapon_Type = 100
	Weapon_BLACK_POWDER_RIFLE  Weapon_Type = 101
	Weapon_PISTOL              Weapon_Type = 102
	Weapon_RIFLE               Weapon_Type = 103
	Weapon_CANNON              Weapon_Type = 150
)

var Weapon_Type_name = map[int32]string{
	0:   "UNKNOWN_TYPE",
	1:   "DAGGER",
	2:   "SHORT_BLADE",
	3:   "LONG_BLADE",
	4:   "HAMMER",
	5:   "AXE",
	6:   "POLE_ARM",
	50:  "BOW",
	51:  "CROSSBOW",
	100: "BLACK_POWDER_PISTOL",
	101: "BLACK_POWDER_RIFLE",
	102: "PISTOL",
	103: "RIFLE",
	150: "CANNON",
}
var Weapon_Type_value = map[string]int32{
	"UNKNOWN_TYPE":        0,
	"DAGGER":              1,
	"SHORT_BLADE":         2,
	"LONG_BLADE":          3,
	"HAMMER":              4,
	"AXE":                 5,
	"POLE_ARM":            6,
	"BOW":                 50,
	"CROSSBOW":            51,
	"BLACK_POWDER_PISTOL": 100,
	"BLACK_POWDER_RIFLE":  101,
	"PISTOL":              102,
	"RIFLE":               103,
	"CANNON":              150,
}

func (x Weapon_Type) String() string {
	return proto.EnumName(Weapon_Type_name, int32(x))
}
func (Weapon_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorWeapon, []int{1, 0} }

// Ammunition implements ammunition for projectile weapons.
type Ammunition struct {
	Name          string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Aliases       []string        `protobuf:"bytes,2,rep,name=aliases" json:"aliases,omitempty"`
	Description   string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DamageType    DamageType      `protobuf:"varint,4,opt,name=damage_type,json=damageType,proto3,enum=microdungeon.DamageType" json:"damage_type,omitempty"`
	Type          Ammunition_Type `protobuf:"varint,5,opt,name=type,proto3,enum=microdungeon.Ammunition_Type" json:"type,omitempty"`
	Wc            *Calculator     `protobuf:"bytes,6,opt,name=wc" json:"wc,omitempty"`
	Modifiers     []*Modifier     `protobuf:"bytes,7,rep,name=modifiers" json:"modifiers,omitempty"`
	Weight        uint32          `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	RangeModifier uint32          `protobuf:"varint,9,opt,name=range_modifier,json=rangeModifier,proto3" json:"range_modifier,omitempty"`
}

func (m *Ammunition) Reset()                    { *m = Ammunition{} }
func (m *Ammunition) String() string            { return proto.CompactTextString(m) }
func (*Ammunition) ProtoMessage()               {}
func (*Ammunition) Descriptor() ([]byte, []int) { return fileDescriptorWeapon, []int{0} }

func (m *Ammunition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ammunition) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *Ammunition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Ammunition) GetDamageType() DamageType {
	if m != nil {
		return m.DamageType
	}
	return DamageType_UNKNOWN_DAMAGE_TYPE
}

func (m *Ammunition) GetType() Ammunition_Type {
	if m != nil {
		return m.Type
	}
	return Ammunition_UNKNOWN_TYPE
}

func (m *Ammunition) GetWc() *Calculator {
	if m != nil {
		return m.Wc
	}
	return nil
}

func (m *Ammunition) GetModifiers() []*Modifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *Ammunition) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Ammunition) GetRangeModifier() uint32 {
	if m != nil {
		return m.RangeModifier
	}
	return 0
}

// Weapon is the basis for all weapons.
type Weapon struct {
	Name             string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Aliases          []string    `protobuf:"bytes,2,rep,name=aliases" json:"aliases,omitempty"`
	Description      string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WeightClass      WeightClass `protobuf:"varint,4,opt,name=weight_class,json=weightClass,proto3,enum=microdungeon.WeightClass" json:"weight_class,omitempty"`
	Type             Weapon_Type `protobuf:"varint,5,opt,name=type,proto3,enum=microdungeon.Weapon_Type" json:"type,omitempty"`
	Wc               *Calculator `protobuf:"bytes,6,opt,name=wc" json:"wc,omitempty"`
	Modifiers        []*Modifier `protobuf:"bytes,7,rep,name=modifiers" json:"modifiers,omitempty"`
	StealthAdvantage bool        `protobuf:"varint,8,opt,name=stealth_advantage,json=stealthAdvantage,proto3" json:"stealth_advantage,omitempty"`
	Weight           uint32      `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
	Thrown           bool        `protobuf:"varint,10,opt,name=thrown,proto3" json:"thrown,omitempty"`
	Reach            bool        `protobuf:"varint,12,opt,name=reach,proto3" json:"reach,omitempty"`
	TwoHanded        bool        `protobuf:"varint,13,opt,name=two_handed,json=twoHanded,proto3" json:"two_handed,omitempty"`
	Versatile        bool        `protobuf:"varint,14,opt,name=versatile,proto3" json:"versatile,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*Weapon_DamageType
	//	*Weapon_ProjectileAttributes_
	Attributes isWeapon_Attributes `protobuf_oneof:"attributes"`
	// TODO: reduce this number once we have a better idea of used fields.
	Wielded bool `protobuf:"varint,100,opt,name=wielded,proto3" json:"wielded,omitempty"`
}

func (m *Weapon) Reset()                    { *m = Weapon{} }
func (m *Weapon) String() string            { return proto.CompactTextString(m) }
func (*Weapon) ProtoMessage()               {}
func (*Weapon) Descriptor() ([]byte, []int) { return fileDescriptorWeapon, []int{1} }

type isWeapon_Attributes interface {
	isWeapon_Attributes()
}

type Weapon_DamageType struct {
	DamageType DamageType `protobuf:"varint,15,opt,name=damage_type,json=damageType,proto3,enum=microdungeon.DamageType,oneof"`
}
type Weapon_ProjectileAttributes_ struct {
	ProjectileAttributes *Weapon_ProjectileAttributes `protobuf:"bytes,16,opt,name=projectile_attributes,json=projectileAttributes,oneof"`
}

func (*Weapon_DamageType) isWeapon_Attributes()            {}
func (*Weapon_ProjectileAttributes_) isWeapon_Attributes() {}

func (m *Weapon) GetAttributes() isWeapon_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Weapon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Weapon) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *Weapon) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Weapon) GetWeightClass() WeightClass {
	if m != nil {
		return m.WeightClass
	}
	return WeightClass_UNKNOWN_WEIGHT_CLASS
}

func (m *Weapon) GetType() Weapon_Type {
	if m != nil {
		return m.Type
	}
	return Weapon_UNKNOWN_TYPE
}

func (m *Weapon) GetWc() *Calculator {
	if m != nil {
		return m.Wc
	}
	return nil
}

func (m *Weapon) GetModifiers() []*Modifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *Weapon) GetStealthAdvantage() bool {
	if m != nil {
		return m.StealthAdvantage
	}
	return false
}

func (m *Weapon) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Weapon) GetThrown() bool {
	if m != nil {
		return m.Thrown
	}
	return false
}

func (m *Weapon) GetReach() bool {
	if m != nil {
		return m.Reach
	}
	return false
}

func (m *Weapon) GetTwoHanded() bool {
	if m != nil {
		return m.TwoHanded
	}
	return false
}

func (m *Weapon) GetVersatile() bool {
	if m != nil {
		return m.Versatile
	}
	return false
}

func (m *Weapon) GetDamageType() DamageType {
	if x, ok := m.GetAttributes().(*Weapon_DamageType); ok {
		return x.DamageType
	}
	return DamageType_UNKNOWN_DAMAGE_TYPE
}

func (m *Weapon) GetProjectileAttributes() *Weapon_ProjectileAttributes {
	if x, ok := m.GetAttributes().(*Weapon_ProjectileAttributes_); ok {
		return x.ProjectileAttributes
	}
	return nil
}

func (m *Weapon) GetWielded() bool {
	if m != nil {
		return m.Wielded
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Weapon) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Weapon_OneofMarshaler, _Weapon_OneofUnmarshaler, _Weapon_OneofSizer, []interface{}{
		(*Weapon_DamageType)(nil),
		(*Weapon_ProjectileAttributes_)(nil),
	}
}

func _Weapon_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Weapon)
	// attributes
	switch x := m.Attributes.(type) {
	case *Weapon_DamageType:
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.DamageType))
	case *Weapon_ProjectileAttributes_:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProjectileAttributes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Weapon.Attributes has unexpected type %T", x)
	}
	return nil
}

func _Weapon_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Weapon)
	switch tag {
	case 15: // attributes.damage_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Attributes = &Weapon_DamageType{DamageType(x)}
		return true, err
	case 16: // attributes.projectile_attributes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Weapon_ProjectileAttributes)
		err := b.DecodeMessage(msg)
		m.Attributes = &Weapon_ProjectileAttributes_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Weapon_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Weapon)
	// attributes
	switch x := m.Attributes.(type) {
	case *Weapon_DamageType:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DamageType))
	case *Weapon_ProjectileAttributes_:
		s := proto.Size(x.ProjectileAttributes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Weapon_ProjectileAttributes struct {
	Type         Ammunition_Type `protobuf:"varint,1,opt,name=type,proto3,enum=microdungeon.Ammunition_Type" json:"type,omitempty"`
	PerShot      uint32          `protobuf:"varint,2,opt,name=per_shot,json=perShot,proto3" json:"per_shot,omitempty"`
	RangeMin     uint32          `protobuf:"varint,3,opt,name=range_min,json=rangeMin,proto3" json:"range_min,omitempty"`
	RangeMax     uint32          `protobuf:"varint,4,opt,name=range_max,json=rangeMax,proto3" json:"range_max,omitempty"`
	MagazineSize uint32          `protobuf:"varint,5,opt,name=magazine_size,json=magazineSize,proto3" json:"magazine_size,omitempty"`
	ReloadTime   uint32          `protobuf:"varint,6,opt,name=reload_time,json=reloadTime,proto3" json:"reload_time,omitempty"`
}

func (m *Weapon_ProjectileAttributes) Reset()         { *m = Weapon_ProjectileAttributes{} }
func (m *Weapon_ProjectileAttributes) String() string { return proto.CompactTextString(m) }
func (*Weapon_ProjectileAttributes) ProtoMessage()    {}
func (*Weapon_ProjectileAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptorWeapon, []int{1, 0}
}

func (m *Weapon_ProjectileAttributes) GetType() Ammunition_Type {
	if m != nil {
		return m.Type
	}
	return Ammunition_UNKNOWN_TYPE
}

func (m *Weapon_ProjectileAttributes) GetPerShot() uint32 {
	if m != nil {
		return m.PerShot
	}
	return 0
}

func (m *Weapon_ProjectileAttributes) GetRangeMin() uint32 {
	if m != nil {
		return m.RangeMin
	}
	return 0
}

func (m *Weapon_ProjectileAttributes) GetRangeMax() uint32 {
	if m != nil {
		return m.RangeMax
	}
	return 0
}

func (m *Weapon_ProjectileAttributes) GetMagazineSize() uint32 {
	if m != nil {
		return m.MagazineSize
	}
	return 0
}

func (m *Weapon_ProjectileAttributes) GetReloadTime() uint32 {
	if m != nil {
		return m.ReloadTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Ammunition)(nil), "microdungeon.Ammunition")
	proto.RegisterType((*Weapon)(nil), "microdungeon.Weapon")
	proto.RegisterType((*Weapon_ProjectileAttributes)(nil), "microdungeon.Weapon.ProjectileAttributes")
	proto.RegisterEnum("microdungeon.Ammunition_Type", Ammunition_Type_name, Ammunition_Type_value)
	proto.RegisterEnum("microdungeon.Weapon_Type", Weapon_Type_name, Weapon_Type_value)
}

func init() { proto.RegisterFile("weapon.proto", fileDescriptorWeapon) }

var fileDescriptorWeapon = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x93, 0xd4, 0x8d, 0x8f, 0x93, 0xec, 0x30, 0x94, 0x32, 0x5b, 0x58, 0x11, 0x15, 0x21,
	0x05, 0x21, 0x2a, 0xd1, 0xe5, 0x66, 0x05, 0x37, 0x4e, 0x6a, 0x9a, 0xd5, 0xa6, 0x71, 0x34, 0x09,
	0x0a, 0x70, 0x63, 0xa6, 0xf6, 0x6c, 0x32, 0xc8, 0xf6, 0x58, 0xf6, 0x74, 0xbd, 0xed, 0x83, 0xf0,
	0x04, 0x3c, 0x12, 0x57, 0x5c, 0xf3, 0x20, 0xc8, 0xe3, 0x24, 0x8d, 0xa1, 0x20, 0x2e, 0x10, 0x77,
	0x3e, 0xdf, 0xcf, 0xfc, 0xf8, 0x3b, 0xc7, 0x86, 0x4e, 0xc1, 0x59, 0x2a, 0x93, 0xf3, 0x34, 0x93,
	0x4a, 0xe2, 0x4e, 0x2c, 0x82, 0x4c, 0x86, 0xb7, 0xc9, 0x8a, 0xcb, 0xe4, 0xf4, 0x98, 0xdd, 0x88,
	0x48, 0xa8, 0x3b, 0x3f, 0x0f, 0x64, 0xc6, 0xf3, 0x4a, 0x73, 0xda, 0x09, 0x59, 0xcc, 0x56, 0x7c,
	0x53, 0xd9, 0xea, 0x2e, 0xdd, 0x52, 0x67, 0xbf, 0x34, 0x01, 0x9c, 0x38, 0xbe, 0x4d, 0x84, 0x12,
	0x32, 0xc1, 0x18, 0x5a, 0x09, 0x8b, 0x39, 0x31, 0xfa, 0xc6, 0xc0, 0xa2, 0xfa, 0x19, 0x13, 0x38,
	0x62, 0x91, 0x60, 0x39, 0xcf, 0x49, 0xa3, 0xdf, 0x1c, 0x58, 0x74, 0x5b, 0xe2, 0x3e, 0xd8, 0x21,
	0xcf, 0x83, 0x4c, 0xa4, 0xa5, 0x99, 0x34, 0xb5, 0x69, 0x1f, 0xc2, 0x2f, 0xc0, 0xae, 0xf6, 0xf6,
	0xcb, 0x4d, 0x49, 0xab, 0x6f, 0x0c, 0x7a, 0x17, 0xe4, 0x7c, 0xff, 0xcc, 0xe7, 0x97, 0x5a, 0xb0,
	0xb8, 0x4b, 0x39, 0x85, 0x70, 0xf7, 0x8c, 0xbf, 0x80, 0x96, 0xf6, 0x1c, 0x6a, 0xcf, 0xb3, 0xba,
	0xe7, 0xe1, 0xc8, 0xe7, 0xda, 0xa8, 0xa5, 0x78, 0x00, 0x8d, 0x22, 0x20, 0x66, 0xdf, 0x18, 0xd8,
	0x7f, 0xde, 0x64, 0xc4, 0xa2, 0xe0, 0x36, 0x62, 0x4a, 0x66, 0xb4, 0x51, 0x04, 0xf8, 0x4b, 0xb0,
	0x62, 0x19, 0x8a, 0xd7, 0x82, 0x67, 0x39, 0x39, 0xea, 0x37, 0x07, 0xf6, 0xc5, 0x49, 0xdd, 0x70,
	0xbd, 0xa1, 0xe9, 0x83, 0x10, 0x9f, 0x80, 0x59, 0x70, 0xb1, 0x5a, 0x2b, 0xd2, 0xee, 0x1b, 0x83,
	0x2e, 0xdd, 0x54, 0xf8, 0x13, 0xe8, 0x65, 0x2c, 0x59, 0x71, 0x7f, 0x2b, 0x25, 0x96, 0xe6, 0xbb,
	0x1a, 0xdd, 0xae, 0x74, 0xf6, 0x02, 0x5a, 0xfa, 0x66, 0x08, 0x3a, 0xdf, 0x4e, 0x5f, 0x4d, 0xbd,
	0xe5, 0xd4, 0x5f, 0x7c, 0x3f, 0x73, 0xd1, 0x01, 0xb6, 0xe0, 0xd0, 0xa1, 0xd4, 0x5b, 0x22, 0x03,
	0xb7, 0xa1, 0x35, 0xf4, 0x26, 0x0b, 0xd4, 0xc0, 0x00, 0xe6, 0xcc, 0x1d, 0x0e, 0x27, 0x2e, 0x6a,
	0x9e, 0xfd, 0xd6, 0x06, 0x73, 0xa9, 0x63, 0xff, 0xcf, 0x23, 0xfa, 0xba, 0x6c, 0xa8, 0xf2, 0x1a,
	0x7e, 0x10, 0xb1, 0x3c, 0xdf, 0x64, 0xf4, 0xb4, 0xfe, 0x36, 0x96, 0x5a, 0x31, 0x2a, 0x05, 0xd4,
	0x2e, 0x1e, 0x0a, 0xfc, 0x79, 0x2d, 0xa5, 0xbf, 0xb8, 0x74, 0xa3, 0xfe, 0x8f, 0x09, 0x7d, 0x06,
	0xef, 0xe4, 0x8a, 0xb3, 0x48, 0xad, 0x7d, 0x16, 0xbe, 0x61, 0x89, 0x62, 0x2b, 0xae, 0xc3, 0x6a,
	0x53, 0xb4, 0x21, 0x9c, 0x2d, 0xbe, 0x17, 0xa7, 0x55, 0x8b, 0xf3, 0x04, 0x4c, 0xb5, 0xce, 0x64,
	0x91, 0x10, 0xd0, 0xce, 0x4d, 0x85, 0x8f, 0xe1, 0x30, 0xe3, 0x2c, 0x58, 0x93, 0x8e, 0x86, 0xab,
	0x02, 0x3f, 0x03, 0x50, 0x85, 0xf4, 0xd7, 0x2c, 0x09, 0x79, 0x48, 0xba, 0x9a, 0xb2, 0x54, 0x21,
	0xc7, 0x1a, 0xc0, 0x1f, 0x82, 0xf5, 0x86, 0x67, 0x39, 0x53, 0x22, 0xe2, 0xa4, 0x57, 0xb1, 0x3b,
	0x00, 0x7f, 0x55, 0x9f, 0x8f, 0x27, 0xff, 0x3c, 0x1f, 0xe3, 0x83, 0xda, 0x84, 0xfc, 0x08, 0xef,
	0xa5, 0x99, 0xfc, 0x89, 0x07, 0xe5, 0x52, 0x3e, 0x53, 0x2a, 0x13, 0x37, 0xb7, 0x8a, 0xe7, 0x04,
	0xe9, 0xf7, 0xfb, 0xe9, 0xa3, 0x61, 0xcc, 0x76, 0x0e, 0x67, 0x67, 0x18, 0x1f, 0xd0, 0xe3, 0xf4,
	0x11, 0xbc, 0xec, 0xab, 0x42, 0xf0, 0xa8, 0xbc, 0x58, 0xa8, 0x8f, 0xbe, 0x2d, 0x4f, 0x7f, 0x37,
	0xe0, 0xf8, 0xb1, 0xa5, 0x76, 0x63, 0x6b, 0xfc, 0xfb, 0xb1, 0x7d, 0x0a, 0xed, 0x94, 0x67, 0x7e,
	0xbe, 0x96, 0x8a, 0x34, 0x74, 0x12, 0x47, 0x29, 0xcf, 0xe6, 0x6b, 0xa9, 0xf0, 0x07, 0x60, 0x6d,
	0x26, 0x4b, 0x54, 0xcd, 0xdb, 0xa5, 0xed, 0x6a, 0xa8, 0x44, 0xb2, 0x47, 0xb2, 0xb7, 0xba, 0x6d,
	0x77, 0x24, 0x7b, 0x8b, 0x3f, 0x86, 0x6e, 0xcc, 0x56, 0xec, 0x5e, 0x24, 0xdc, 0xcf, 0xc5, 0x7d,
	0xd5, 0xa1, 0x5d, 0xda, 0xd9, 0x82, 0x73, 0x71, 0xcf, 0xf1, 0x47, 0x60, 0x67, 0x3c, 0x92, 0x2c,
	0xf4, 0x95, 0x88, 0xb9, 0xee, 0xcb, 0x2e, 0x85, 0x0a, 0x5a, 0x88, 0x98, 0x9f, 0xfd, 0x6a, 0xfc,
	0xed, 0xcc, 0x02, 0x98, 0x97, 0xce, 0xd5, 0x95, 0x4b, 0x91, 0x81, 0x9f, 0x80, 0x3d, 0x1f, 0x7b,
	0x74, 0xe1, 0x0f, 0x27, 0xce, 0xa5, 0x8b, 0x1a, 0xb8, 0x07, 0x30, 0xf1, 0xa6, 0x57, 0x9b, 0xba,
	0x59, 0x8a, 0xc7, 0xce, 0xf5, 0xb5, 0x4b, 0x51, 0x0b, 0x1f, 0x41, 0xd3, 0xf9, 0xce, 0x45, 0x87,
	0xb8, 0x03, 0xed, 0x99, 0x37, 0x71, 0x7d, 0x87, 0x5e, 0x23, 0xb3, 0x84, 0x87, 0xde, 0x12, 0x5d,
	0x94, 0xf0, 0x88, 0x7a, 0xf3, 0x79, 0x59, 0x3d, 0xc7, 0xef, 0xc3, 0xbb, 0xc3, 0x89, 0x33, 0x7a,
	0xe5, 0xcf, 0xbc, 0xe5, 0xa5, 0x4b, 0xfd, 0xd9, 0xcb, 0xf9, 0xc2, 0x9b, 0xa0, 0x10, 0x9f, 0x00,
	0xae, 0x11, 0xf4, 0xe5, 0x37, 0x13, 0x17, 0x71, 0xfd, 0xd9, 0xa8, 0x34, 0xaf, 0xcb, 0xef, 0x4a,
	0x05, 0xaf, 0xb0, 0x0d, 0xe6, 0xc8, 0x99, 0x4e, 0xbd, 0x29, 0xfa, 0xd9, 0x18, 0x76, 0x00, 0x1e,
	0xda, 0x65, 0xd8, 0xfb, 0xa1, 0xf6, 0x13, 0xb9, 0x31, 0xf5, 0xaf, 0xe1, 0xf9, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x12, 0xe4, 0x11, 0x05, 0x69, 0x06, 0x00, 0x00,
}
