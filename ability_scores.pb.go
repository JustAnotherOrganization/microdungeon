// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ability_scores.proto

/*
Package microdungeon is a generated protocol buffer package.

It is generated from these files:
	ability_scores.proto
	alignment.proto
	armour.proto
	character.proto
	class.proto
	damage.proto
	race.proto
	skill.proto
	types.proto
	weapon.proto

It has these top-level messages:
	Ability
	Score
	Modifier
	Alignment
	Armour
	Character
	Class
	Race
	Skill
	Calculator
	Ammunition
	Weapon
*/
package microdungeon

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AbilityType int32

const (
	AbilityType_UNKNOWN      AbilityType = 0
	AbilityType_STRENGTH     AbilityType = 1
	AbilityType_DEXTERITY    AbilityType = 2
	AbilityType_CONSTITION   AbilityType = 3
	AbilityType_INTELLIGENCE AbilityType = 4
	AbilityType_WISDOM       AbilityType = 5
	AbilityType_CHARISMA     AbilityType = 6
)

var AbilityType_name = map[int32]string{
	0: "UNKNOWN",
	1: "STRENGTH",
	2: "DEXTERITY",
	3: "CONSTITION",
	4: "INTELLIGENCE",
	5: "WISDOM",
	6: "CHARISMA",
}
var AbilityType_value = map[string]int32{
	"UNKNOWN":      0,
	"STRENGTH":     1,
	"DEXTERITY":    2,
	"CONSTITION":   3,
	"INTELLIGENCE": 4,
	"WISDOM":       5,
	"CHARISMA":     6,
}

func (x AbilityType) String() string {
	return proto.EnumName(AbilityType_name, int32(x))
}
func (AbilityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAbilityScores, []int{0} }

// Ability is a standard D&D ability.
type Ability struct {
	Type  AbilityType `protobuf:"varint,1,opt,name=type,proto3,enum=microdungeon.AbilityType" json:"type,omitempty"`
	Value int32       `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Ability) Reset()                    { *m = Ability{} }
func (m *Ability) String() string            { return proto.CompactTextString(m) }
func (*Ability) ProtoMessage()               {}
func (*Ability) Descriptor() ([]byte, []int) { return fileDescriptorAbilityScores, []int{0} }

func (m *Ability) GetType() AbilityType {
	if m != nil {
		return m.Type
	}
	return AbilityType_UNKNOWN
}

func (m *Ability) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Score houses all the ability scores of a given object.
type Score struct {
	Set []*Ability `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptorAbilityScores, []int{1} }

func (m *Score) GetSet() []*Ability {
	if m != nil {
		return m.Set
	}
	return nil
}

// Modifier is a standard D&D ability modifier.
type Modifier struct {
	Type AbilityType `protobuf:"varint,1,opt,name=type,proto3,enum=microdungeon.AbilityType" json:"type,omitempty"`
	Max  int32       `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Die  int32       `protobuf:"varint,3,opt,name=die,proto3" json:"die,omitempty"`
}

func (m *Modifier) Reset()                    { *m = Modifier{} }
func (m *Modifier) String() string            { return proto.CompactTextString(m) }
func (*Modifier) ProtoMessage()               {}
func (*Modifier) Descriptor() ([]byte, []int) { return fileDescriptorAbilityScores, []int{2} }

func (m *Modifier) GetType() AbilityType {
	if m != nil {
		return m.Type
	}
	return AbilityType_UNKNOWN
}

func (m *Modifier) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Modifier) GetDie() int32 {
	if m != nil {
		return m.Die
	}
	return 0
}

func init() {
	proto.RegisterType((*Ability)(nil), "microdungeon.Ability")
	proto.RegisterType((*Score)(nil), "microdungeon.Score")
	proto.RegisterType((*Modifier)(nil), "microdungeon.Modifier")
	proto.RegisterEnum("microdungeon.AbilityType", AbilityType_name, AbilityType_value)
}

func init() { proto.RegisterFile("ability_scores.proto", fileDescriptorAbilityScores) }

var fileDescriptorAbilityScores = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xed, 0xba, 0x6e, 0xf3, 0x6e, 0x8e, 0x10, 0x26, 0xd4, 0xb7, 0xd1, 0x17, 0x8b, 0x60,
	0x91, 0xf9, 0x0b, 0x6a, 0x17, 0xb6, 0xe0, 0x9a, 0x42, 0x1a, 0x99, 0x0a, 0x22, 0xdd, 0x1a, 0x25,
	0xb0, 0x2d, 0xa5, 0xed, 0xc4, 0xfe, 0x7b, 0xe9, 0xba, 0x87, 0x09, 0xbe, 0xf8, 0x76, 0xef, 0xe1,
	0xbb, 0xe7, 0x1e, 0x0e, 0x8c, 0x92, 0x95, 0xda, 0xa8, 0xb2, 0x7a, 0x2f, 0xd6, 0x3a, 0x97, 0x85,
	0x97, 0xe5, 0xba, 0xd4, 0x78, 0xb0, 0x55, 0xeb, 0x5c, 0xa7, 0xfb, 0xdd, 0xa7, 0xd4, 0x3b, 0x87,
	0x41, 0xd7, 0x6f, 0x28, 0x7c, 0x0b, 0xed, 0xb2, 0xca, 0xa4, 0x6d, 0x8c, 0x0d, 0x77, 0x38, 0xb9,
	0xf2, 0x4e, 0x39, 0xef, 0x08, 0x89, 0x2a, 0x93, 0xfc, 0x80, 0xe1, 0x11, 0x58, 0x5f, 0xc9, 0x66,
	0x2f, 0xed, 0xd6, 0xd8, 0x70, 0x2d, 0xde, 0x2c, 0xce, 0x1d, 0x58, 0x71, 0xfd, 0x0d, 0x5f, 0x83,
	0x59, 0xc8, 0xd2, 0x36, 0xc6, 0xa6, 0xdb, 0x9f, 0x5c, 0xfe, 0x69, 0xc6, 0x6b, 0xc2, 0x79, 0x83,
	0x5e, 0xa8, 0x53, 0xf5, 0xa1, 0x64, 0xfe, 0xdf, 0x08, 0x08, 0xcc, 0x6d, 0xf2, 0x7d, 0x0c, 0x50,
	0x8f, 0xb5, 0x92, 0x2a, 0x69, 0x9b, 0x8d, 0x92, 0x2a, 0x79, 0x53, 0x40, 0xff, 0xe4, 0x10, 0xf7,
	0xa1, 0xfb, 0xc4, 0x1e, 0x59, 0xb4, 0x64, 0xe8, 0x0c, 0x0f, 0xa0, 0x17, 0x0b, 0x4e, 0xd8, 0x4c,
	0xcc, 0x91, 0x81, 0x2f, 0xe0, 0x7c, 0x4a, 0x9e, 0x05, 0xe1, 0x54, 0xbc, 0xa0, 0x16, 0x1e, 0x02,
	0x04, 0x11, 0x8b, 0x05, 0x15, 0x34, 0x62, 0xc8, 0xc4, 0x08, 0x06, 0x94, 0x09, 0xb2, 0x58, 0xd0,
	0x19, 0x61, 0x01, 0x41, 0x6d, 0x0c, 0xd0, 0x59, 0xd2, 0x78, 0x1a, 0x85, 0xc8, 0xaa, 0xad, 0x82,
	0xb9, 0xcf, 0x69, 0x1c, 0xfa, 0xa8, 0xf3, 0x30, 0x7c, 0xfd, 0xd5, 0xf2, 0xaa, 0x73, 0xa8, 0xfe,
	0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x03, 0xd0, 0x22, 0x86, 0x92, 0x01, 0x00, 0x00,
}
