// Code generated by protoc-gen-go. DO NOT EDIT.
// source: class.proto

package microdungeon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Class is a playable D&D class.
type Class struct {
	Name             string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HitDie           uint32        `protobuf:"varint,2,opt,name=hit_die,json=hitDie" json:"hit_die,omitempty"`
	PrimaryAbilities []AbilityType `protobuf:"varint,3,rep,packed,name=primary_abilities,json=primaryAbilities,enum=microdungeon.AbilityType" json:"primary_abilities,omitempty"`
}

func (m *Class) Reset()                    { *m = Class{} }
func (m *Class) String() string            { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()               {}
func (*Class) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Class) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Class) GetHitDie() uint32 {
	if m != nil {
		return m.HitDie
	}
	return 0
}

func (m *Class) GetPrimaryAbilities() []AbilityType {
	if m != nil {
		return m.PrimaryAbilities
	}
	return nil
}

func init() {
	proto.RegisterType((*Class)(nil), "microdungeon.Class")
}

func init() { proto.RegisterFile("class.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x49, 0x2c,
	0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9, 0xcd, 0x4c, 0x2e, 0xca, 0x4f, 0x29,
	0xcd, 0x4b, 0x4f, 0xcd, 0xcf, 0x93, 0x12, 0x49, 0x4c, 0xca, 0xcc, 0xc9, 0x2c, 0xa9, 0x8c, 0x2f,
	0x4e, 0xce, 0x2f, 0x4a, 0x85, 0xaa, 0x51, 0xaa, 0xe1, 0x62, 0x75, 0x06, 0x69, 0x11, 0x12, 0xe2,
	0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0xc4,
	0xb9, 0xd8, 0x33, 0x32, 0x4b, 0xe2, 0x53, 0x32, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83,
	0xd8, 0x32, 0x32, 0x4b, 0x5c, 0x32, 0x53, 0x85, 0xdc, 0xb8, 0x04, 0x0b, 0x8a, 0x32, 0x73, 0x13,
	0x8b, 0x2a, 0xe3, 0x21, 0xa6, 0x66, 0xa6, 0x16, 0x4b, 0x30, 0x2b, 0x30, 0x6b, 0xf0, 0x19, 0x49,
	0xea, 0x21, 0xdb, 0xaa, 0xe7, 0x08, 0xb1, 0x34, 0xa4, 0xb2, 0x20, 0x35, 0x48, 0x00, 0xaa, 0xc7,
	0x11, 0xa6, 0xc5, 0x89, 0x2f, 0x0a, 0xc5, 0x8d, 0x49, 0x6c, 0x60, 0x47, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x5f, 0x6d, 0x8b, 0x9e, 0xc7, 0x00, 0x00, 0x00,
}
